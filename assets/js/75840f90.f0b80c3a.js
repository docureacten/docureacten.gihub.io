"use strict";(self.webpackChunkdocubook=self.webpackChunkdocubook||[]).push([[2646],{7010:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var o=t(4848),a=t(8453);const r={},i="Types of Custom Hook Returns",s={id:"Hook/7-10-Types of Custom Hook Returns",title:"Types of Custom Hook Returns",description:"When creating custom hooks in React, one of the key considerations is what the hook should return. The return value of a custom hook shapes how the hook will be used by the components that call it. A well-designed return structure can make the hook more versatile, easier to use, and more intuitive. In this section, we will explore various types of return values for custom hooks, with clear examples to illustrate each type.",source:"@site/docs/7-Hook/7-10-Types of Custom Hook Returns.md",sourceDirName:"7-Hook",slug:"/Hook/7-10-Types of Custom Hook Returns",permalink:"/Hook/7-10-Types of Custom Hook Returns",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Reviewing useState, useRef, and useEffect",permalink:"/Hook/7-1-Reviewing useState, useRef, and useEffect"},next:{title:"Extracting State Logic with Custom Hooks",permalink:"/Hook/7-11-Extracting State Logic with Custom Hooks"}},u={},l=[{value:"1. Returning a Single Value",id:"1-returning-a-single-value",level:2},{value:"Example: A Hook for Window Width",id:"example-a-hook-for-window-width",level:3},{value:"2. Returning an Object",id:"2-returning-an-object",level:2},{value:"Example: A Hook for Managing Form Input",id:"example-a-hook-for-managing-form-input",level:3},{value:"3. Returning an Array",id:"3-returning-an-array",level:2},{value:"Example: A Hook for Toggling Boolean State",id:"example-a-hook-for-toggling-boolean-state",level:3},{value:"4. Returning a Function",id:"4-returning-a-function",level:2},{value:"Example: A Hook for Fetching Data",id:"example-a-hook-for-fetching-data",level:3},{value:"Further Reading",id:"further-reading",level:2},{value:"Summary",id:"summary",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"types-of-custom-hook-returns",children:"Types of Custom Hook Returns"}),"\n",(0,o.jsx)(n.p,{children:"When creating custom hooks in React, one of the key considerations is what the hook should return. The return value of a custom hook shapes how the hook will be used by the components that call it. A well-designed return structure can make the hook more versatile, easier to use, and more intuitive. In this section, we will explore various types of return values for custom hooks, with clear examples to illustrate each type."}),"\n",(0,o.jsx)(n.h2,{id:"1-returning-a-single-value",children:"1. Returning a Single Value"}),"\n",(0,o.jsx)(n.p,{children:"One of the simplest forms of a custom hook return is a single value, such as a piece of state or a derived value."}),"\n",(0,o.jsx)(n.h3,{id:"example-a-hook-for-window-width",children:"Example: A Hook for Window Width"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"import { useState, useEffect } from 'react';\n\n// A custom hook that returns the current width of the browser window\nfunction useWindowWidth() {\n    const [width, setWidth] = useState(window.innerWidth);\n\n    useEffect(() => {\n        // Update the width state when the window is resized\n        const handleResize = () => setWidth(window.innerWidth);\n        window.addEventListener('resize', handleResize);\n\n        // Clean up the event listener on component unmount\n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n\n    return width; // The hook returns only the current width value\n}\n\n// Usage in a component\nfunction MyComponent() {\n    const width = useWindowWidth();\n\n    return (\n        <div>\n            <p>Window width: {width}px</p>\n        </div>\n    );\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Key Point:"})," Returning a single value is ideal when the hook is focused on providing a simple, specific piece of information."]}),"\n",(0,o.jsx)(n.h2,{id:"2-returning-an-object",children:"2. Returning an Object"}),"\n",(0,o.jsx)(n.p,{children:"Returning an object allows the custom hook to provide multiple related values or methods in a structured way. This can be useful when the hook manages more complex state or when it provides utility functions alongside the state."}),"\n",(0,o.jsx)(n.h3,{id:"example-a-hook-for-managing-form-input",children:"Example: A Hook for Managing Form Input"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"import { useState } from 'react';\n\n// A custom hook that returns value and a function to handle input changes\nfunction useFormInput(initialValue) {\n    const [value, setValue] = useState(initialValue);\n\n    const handleChange = (e) => {\n        setValue(e.target.value);\n    };\n\n    return {\n        value, // The current input value\n        onChange: handleChange // A function to update the value\n    };\n}\n\n// Usage in a component\nfunction MyForm() {\n    const nameInput = useFormInput(''); // Custom hook for managing form input\n\n    return (\n        <div>\n            <label>Name: </label>\n            <input type=\"text\" {...nameInput} />\n        </div>\n    );\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Key Point:"})," Returning an object is beneficial when the hook needs to provide multiple outputs, such as a value and its associated methods, making the hook more flexible and organized."]}),"\n",(0,o.jsx)(n.h2,{id:"3-returning-an-array",children:"3. Returning an Array"}),"\n",(0,o.jsx)(n.p,{children:"Returning an array is similar to returning an object but offers a different way to structure the return value. It's often used when the order of elements is clear and predictable, allowing for easy destructuring in the calling component."}),"\n",(0,o.jsx)(n.h3,{id:"example-a-hook-for-toggling-boolean-state",children:"Example: A Hook for Toggling Boolean State"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"import { useState } from 'react';\n\n// A custom hook for toggling a boolean value\nfunction useToggle(initialValue = false) {\n    const [state, setState] = useState(initialValue);\n\n    const toggle = () => {\n        setState(prevState => !prevState);\n    };\n\n    return [state, toggle]; // The hook returns the state and the toggle function in an array\n}\n\n// Usage in a component\nfunction MyToggleComponent() {\n    const [isOn, toggleIsOn] = useToggle();\n\n    return (\n        <div>\n            <p>The switch is {isOn ? 'ON' : 'OFF'}</p>\n            <button onClick={toggleIsOn}>Toggle</button>\n        </div>\n    );\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Key Point:"})," Returning an array is particularly useful when you want to maintain a consistent order for multiple return values, especially when used with array destructuring."]}),"\n",(0,o.jsx)(n.h2,{id:"4-returning-a-function",children:"4. Returning a Function"}),"\n",(0,o.jsx)(n.p,{children:"Sometimes, a custom hook's primary purpose is to return a function that performs a specific task, especially if the hook encapsulates complex logic or side effects."}),"\n",(0,o.jsx)(n.h3,{id:"example-a-hook-for-fetching-data",children:"Example: A Hook for Fetching Data"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"import { useState, useEffect } from 'react';\n\n// A custom hook that returns a function to fetch data\nfunction useFetchData(url) {\n    const [data, setData] = useState(null);\n    const [loading, setLoading] = useState(false);\n\n    const fetchData = async () => {\n        setLoading(true);\n        try {\n            const response = await fetch(url);\n            const result = await response.json();\n            setData(result);\n        } catch (error) {\n            console.error(\"Failed to fetch data:\", error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return fetchData; // The hook returns only the fetch function\n}\n\n// Usage in a component\nfunction MyDataComponent() {\n    const fetchData = useFetchData('https://api.example.com/data');\n\n    return (\n        <div>\n            <button onClick={fetchData}>Fetch Data</button>\n            {/* Render the fetched data here */}\n        </div>\n    );\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Key Point:"})," Returning a function is effective when the hook's main role is to trigger an action or side effect, keeping the logic encapsulated within the hook."]}),"\n",(0,o.jsx)(n.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Custom Hooks"}),": Learn about creating more complex custom hooks."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"State Management in React"}),": Explore different patterns for managing state effectively."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"React useEffect"}),": Understand how to handle side effects in functional components."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,o.jsx)(n.p,{children:"In this section, we explored the various ways custom hooks in React can return values. Whether returning a single value, an object, an array, or a function, each approach serves a specific use case and can enhance the reusability and clarity of your code. By choosing the appropriate return structure, you can create more flexible and powerful custom hooks."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var o=t(6540);const a={},r=o.createContext(a);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);